#pragma once
#include <string>
#include <string.h>
#include <iostream>

using namespace std;

enum Type{Fire, Electric, Nature};

class Creature {
private:
	double hp;
	string name;
	double basedmg;
	const int maxhp;
public:
	Creature(double hp, string name, double basedmg, int maxhp) : hp(hp), name(name), basedmg(basedmg), maxhp(maxhp) {};
	~Creature() {};

	double getHp() { return hp; }
	double getBaseDmg() { return basedmg; }
	void Print() { cout << "Name: " << name << "Hp: " << hp << endl; }
};

class Pokemon : public Creature {
private:
	Type own;
	Type weakness; // Inkább a MOVE legyen típusos?
	int lvl;
	int growth;
	Move * ability;
public:
	Pokemon(double hp, string name, double basedmg, int maxhp, Type own, Type weakness, int lvl = 1, int growth = 0) :Creature(hp, name, basedmg, maxhp), own(own), weakness(weakness), lvl(lvl), growth() { ability = nullptr; }
	~Pokemon() { delete[] ability; };

	void Print() { Creature::Print(); cout << "Current lvl: " << lvl << endl; }
};

class Human : public Creature {
private:
	Pokemon * array;
	int balls;
	int potions;
public:
	Human(
};

class Move {
private:
	string name;
	double succfaktor;
	double failfaktor;
public:
	Move(string name, double succfaktor=1.25, double failfaktor=0.75) : name(name), succfaktor(succfaktor), failfaktor(failfaktor) {};
	~Move() {};
	double use(Pokemon & owner, Type enemy) {};
	void Print() { cout << "Name: " << name << endl; }
};
