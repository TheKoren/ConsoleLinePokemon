#pragma once
#include <string>
#include <string.h>
#include <iostream>

using namespace std;

enum Type { Fire, Water, Grass };

class Creature {
private:
	double hp;
	string name;
	double basedmg;
	const int maxhp;
public:
	Creature(double hp, string name, double basedmg, int maxhp) : hp(hp), name(name), basedmg(basedmg), maxhp(maxhp) {};
	~Creature() {};
	Creature(const Creature & other);
	string getName() { return name; }
	double getHp() { return hp; }
	double getBaseDmg() { return basedmg; }

	virtual void Print() { cout << "Name: " << name << "Hp: " << hp << endl; }
	bool isAlive() { return hp > 0.0; }
	bool setHp(double newhp);
	bool attack() {}; // Ez valami sima crit chances legyen
};

class Pokemon : public Creature {
private:
	Type own;
	Type weakness; // Inkább a MOVE legyen típusos?
	int lvl;
	int growth;
	Move * ability;
public:
	Pokemon(double hp, string name, double basedmg, int maxhp, Type own, Type weakness, int lvl = 1, int growth = 0) :Creature(hp, name, basedmg, maxhp), own(own), weakness(weakness), lvl(lvl), growth() { ability = nullptr; }
	~Pokemon() { delete[] ability; };
	Pokemon(const Pokemon & other);

	void Print() { cout << "Name: " << getName() << "Hp: " << getHp() << "Current lvl: " << lvl << endl; }
	bool lvlup(int growth) {};
	void listAbility();
	double useAbility();

};

class Human : public Creature {
private:
	Pokemon * pokemons;
	int balls;
	int selectedIndex;
	int potions;
public:
	Human(double hp, string name, double basedmg, int maxhp, int balls, int selectedIndex, int potions) : Creature(hp, name, basedmg, maxhp), balls(balls), selectedIndex(selectedIndex), potions(potions) { pokemons = nullptr; }
	~Human() { delete[] pokemons; }
	Human(const Human & other);
	void Print() { cout << "Name " << getName() << "Hp: " << getHp() << "Number of balls(hehe): " << balls << "Healing potions: " << potions << endl; }
	bool catchPokemon() {}; //Új Pokemon kerül a tömbünkbe
	bool switchtoIndex() {} //Kiválasztjuk a Pokemonunkat
	bool usePotion() {}; // Adott indexűre elhasználhatjuk a potinkat
	bool linkArray(Pokemon * pokemons) {}; // Hozzá csatolunk egy pokemonokból álló tömböt emberünkhöz
	void list() {}; //Ki listázzuk pokemonjainkat
	bool setBalls(int count); //(labdák számán változtatunk)
	bool setPotions(int count); // Potik számán változtatunk
	bool battle(Creature & enemy); // Ha trainerünk csatázik (A user!!) akkor egy creaturrel áll majd szemben. Ezen belül switches case-s megoldás lesz + while mert minden addig megy míg valaki elhal
	double attack(); // Ha meg ez egy nem user human, akkor valahogyan majd kiértékelődik az ő sebzése is (Legyen külön Human-Trainer és sima Human is? Előbbinek van egy pokemonja, másik basicdmg

};

class Move {
private:
	Type own;
	Type weakness;
	string name;
	double succfaktor;
	double failfaktor;
public:
	Move(Type own, Type weakness, string name, double succfaktor = 1.25, double failfaktor = 0.75) : own(own), weakness(weakness), name(name), succfaktor(succfaktor), failfaktor(failfaktor) {};
	~Move() {};
	Move(const Move & other);

	double use(Pokemon & owner, Type enemy) {}; //Valamilyen számítás alapján ki adja a sebzést, + ki irogál diagnosztikai adatokat
	void Print() { cout << "Name: " << name << endl; }
};


/************************Ezeket legszívesebben strucktal csinálnám**********************/
class Story {
private:
	int id;
	char * text;
public:
	Story();
	~Story();
	void Print();
};

class Node {
private:
	int id;
	int next;
	int storyid;
public:
	Node();
	~Node();
	int getStoryid();
};
